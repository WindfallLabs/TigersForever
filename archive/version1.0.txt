# Project folder setup script for Kevin McManigal and the Tigers Forever
#   mapping project
# Author: Garin Wally
# Date: March 7, 2015
# License: MIT, ESRI material: all rights reserved

#=============================================================================
# Imports:
#=============================================================================

print "Importing libs..."

import arcpy
import os
import win32com.client as win32
import shutil
import logging
from subprocess import Popen, PIPE
from time import ctime, sleep

# Import custom texting module
import wfmessages

# Script Log configuration:
log = r"C:\Workspace\Python_Parsa\Script_Log.txt"
start_time = ctime()
logging.basicConfig(filename=log,
                    filemode = 'w',
                    #format='%(levelname)s: %(message)s',
                    format='%(message)s',
                    level=logging.DEBUG)
logging.info("Script start: {0}\n".format(start_time))

print "Logging parameters set: messages will now be logged to:", log

# Arc environment parameters:
# Prevent overwrites:
arcpy.env.overwriteOutput = False

#=============================================================================
# Set variables & directory paths:
#=============================================================================

logging.info("Setting paths...")

# Set main parent directory
main_dir = r"C:\Workspace\Python_Parsa"

# Set directory containing datasets and their features
dataset_dir = os.path.join(main_dir, "Datasets")

# Set Projects folder (parent) to contain all output sheet-project folders
prjbase_dir = os.path.join(main_dir, "PROJECTS")

# Set georeferenced rasters dir
georef_dir = os.path.join(main_dir, "WGS84_Topos.gdb")

# Set footprint directory
foot_dir = georef_dir + r"\Footprints"

# Set directory of original topo sheet (.tif) names
names_dir = os.path.join(main_dir, "ClippedParsaTopos")

# List topo sheet jpg names
arcpy.env.workspace = names_dir
logging.info("Listing topos...")
topos = arcpy.ListRasters()

# Set Spatial Reference for all output data
SR = arcpy.SpatialReference("WGS 1984")
arcpy.env.outputCoordinateSystem = SR
logging.info("Spatial Reference set: {0}".format(SR.name))

logging.info("Paths & vars set")

#=============================================================================
# Function definitions
#=============================================================================

def change_dir(path):
    """Changes current directory in both arcpy and os (for safety)."""
    arcpy.env.workspace = path
    os.chdir(path)


def make_excel(path, name):
    """Makes Excel files."""
    # Open Excel, add workbook
    excel = win32.Dispatch("Excel.Application")
    workbook = excel.Workbooks.Add()
    # Add worksheet "Changes"
    worksheet = workbook.Worksheets("Sheet1")
    # Add column headers: NAME, DATE, TIME, TASKS
    worksheet.Cells(1,1).Value = "NAME"
    worksheet.Cells(1,2).Value = "DATE"
    worksheet.Cells(1,3).Value = "TIME"
    worksheet.Cells(1,4).Value = "TASKS"
    # Save, close, and quit
    workbook.SaveAs(path + '/{0}.xlsx'.format(name))
    workbook.Close()
    excel.Quit()
    # Officially kill the Excel background process
    try:
        Popen("taskkill /f /im EXCEL.EXE", stdout=PIPE)
    except:
        pass

def make_features(dataset_file):
    """Opens the dataset text file and creates features described therein."""
    read_dataset = open(dataset_file, 'r')
    for feature in read_dataset.readlines():
        feature = feature.strip()
        feature_name, geometry = feature.split(", ")
        #logging.info("Creating feature class: {0} {1}".format(
        #    feature_name, geometry))
        arcpy.CreateFeatureclass_management(arcpy.env.workspace,
                                            feature_name,
                                            geometry)
    read_dataset.close()
    
def make_gdb():
    """Makes the master template gdb"""
    #make master gdb
    #use shutil to copy master and rename it after project
    #next, import the topo sheet-specific data


#=============================================================================
# Main Process
#=============================================================================
# Create project directory schemes for each topo
def main():
    for sheet in topos:
        # Add a blank line to the log between project folders
        logging.info("")
        # Reset current dir to Projects folder
        change_dir(prjbase_dir)
        # Make new folder for next sheet & cd into it
        sheet_name = sheet[0:-4]
        os.mkdir(sheet_name)
        print "Processing {0}...".format(sheet_name)
        sheet_dir = os.path.join(prjbase_dir, sheet_name)
        change_dir(sheet_dir)
        # Copy toposheet to new project folder
        logging.info("Copying {0} sheet...".format(
                                            os.path.join(names_dir, sheet)))
        shutil.copy2(os.path.join(names_dir, sheet), sheet_dir)
        # Make blank Excel file named for sheet_name
        logging.info("Creating xlsx file...")
        make_excel(sheet_dir, sheet_name)
        # Make GDB & cd into it
        logging.info("Creating {0}.gdb".format(sheet_name))
        arcpy.CreateFileGDB_management(sheet_dir, sheet_name)
        gdb_dir = arcpy.env.workspace + "\\" + sheet_name + ".gdb"
        arcpy.env.workspace = gdb_dir
        sleep(1)
        # Load in georeferenced raster
        logging.info("Importing {0} georeferenced raster...".format(sheet_name))
        arcpy.env.workspace = georef_dir
        georef_list = arcpy.ListRasters()
        for georef in georef_list:
            if georef == sheet_name:
                georef_path = arcpy.Describe(georef).catalogPath
                arcpy.RasterToGeodatabase_conversion(georef_path, gdb_dir)
                break
        # Load in boundary
        logging.info("Importing full boundary...")
        arcpy.env.workspace = foot_dir
        bounds = arcpy.ListFeatureClasses()
        bounds.sort()
        full_boundary = arcpy.Describe(bounds[0]).catalogPath
        sheet_footprints = arcpy.Describe(bounds[1]).catalogPath
        map_elements = arcpy.CreateFeatureDataset_management(gdb_dir,
                                                             "MapElements",
                                                             SR)
        map_elements = map_elements.getOutput(0)
        arcpy.env.workspace = map_elements
        arcpy.FeatureClassToFeatureClass_conversion(full_boundary,
                                                    map_elements,
                                                    "Full_boundary")
        # Import sheet boundary
        logging.info("Selecting and importing {0} footprint...".format(sheet_name))
        qry = "Name = '{}'".format(sheet_name)
        arcpy.FeatureClassToFeatureClass_conversion(sheet_footprints,
                                                    map_elements, 
                                                    sheet_name + "_footprint",
                                                    qry)
        # Create feature datasets from dataset text file names & cd into it
        for dataset_file in os.listdir(dataset_dir):
            arcpy.env.workspace = gdb_dir
            dataset_name = dataset_file[0:-4]
            logging.info("Creating and populating {} dataset...".format(
                                                        dataset_name))
            new_dataset = arcpy.CreateFeatureDataset_management(
                                                        arcpy.env.workspace,
                                                        dataset_name, SR)
            dataset_path = arcpy.Describe(new_dataset).catalogPath
            arcpy.env.workspace = dataset_path
            # Make feature classes from dataset textfile contents
            make_features(os.path.join(dataset_dir, dataset_file))
        

# Run if executed directly:
if __name__ == '__main__':
    # Start the main process
    try:
        main()
    except:
        error_message = wfmessages.error_msg()
        logging.info("Errors:")
        logging.error(error_message)
        wfmessages.send_text("5308289117", error_message)
    
    # End of script messages
    end_time = ctime()
    end_msg = "\nScript ended: {0}".format(end_time)
    logging.info(end_msg+'\n')
    
    # Send text message to my phone
    try:
        wfmessages.send_text("5308289117", end_msg.strip())
        logging.info("\nText message sent")
    except Exception as e:
        logging.error(e)


